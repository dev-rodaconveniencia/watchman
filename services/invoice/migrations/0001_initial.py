# Generated by Django 2.2.7 on 2020-01-28 11:27

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdditionalInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fisco', models.TextField(blank=True, null=True, verbose_name='Informações Adicionais de Interesse do Fisco')),
                ('taxpayer', models.TextField(blank=True, null=True, verbose_name='Informações Complementares de interesse do Contribuinte')),
                ('xmlAuthorized', models.TextField(blank=True, null=True, verbose_name='Informações Complementares de interesse do Contribuinte')),
                ('effort', models.CharField(blank=True, max_length=32, null=True)),
                ('order', models.CharField(blank=True, max_length=32, null=True)),
                ('contract', models.CharField(blank=True, max_length=32, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Informação Adicional',
                'verbose_name_plural': 'Informações Adicionais',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='Telefone')),
                ('state', models.CharField(blank=True, max_length=80, null=True, verbose_name='Estado')),
                ('district', models.CharField(blank=True, max_length=80, null=True, verbose_name='Bairro')),
                ('additionalInformation', models.CharField(blank=True, max_length=80, null=True, verbose_name='Complemento')),
                ('streetSuffix', models.CharField(blank=True, max_length=15, null=True, verbose_name='Sufixo')),
                ('street', models.CharField(blank=True, max_length=120, null=True, verbose_name='Rua')),
                ('number', models.CharField(blank=True, max_length=32, null=True, verbose_name='Número')),
                ('postalCode', models.CharField(blank=True, max_length=9, null=True, verbose_name='Código Postal')),
                ('country', models.CharField(blank=True, max_length=25, null=True, verbose_name='País')),
                ('countryBacenCode', models.CharField(blank=True, max_length=10, null=True, verbose_name='Código Bacen do País')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Endereço',
                'verbose_name_plural': 'Endereços',
            },
        ),
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Número da Fatura')),
                ('originalAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Original da Fatura')),
                ('discountAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do desconto')),
                ('netAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Líquido da Fatura')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Fatura',
                'verbose_name_plural': 'Faturas',
            },
        ),
        migrations.CreateModel(
            name='Billing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('bill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Bill', verbose_name='Fatura')),
            ],
            options={
                'verbose_name': 'Cobrança',
                'verbose_name_plural': 'Cobranças',
            },
        ),
        migrations.CreateModel(
            name='Buyer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('federalTaxNumber', models.CharField(blank=True, max_length=25, null=True, verbose_name='Identificação do destinatário (CPF, CNPJ, idEstrangeiro)')),
                ('name', models.CharField(blank=True, max_length=120, null=True, verbose_name='Razão Social ou nome do destinatário')),
                ('stateTaxNumber', models.CharField(blank=True, max_length=25, null=True, verbose_name='Inscrição Estadual')),
                ('stateTaxNumberIndicator', models.IntegerField(blank=True, null=True, verbose_name='Indicador Inscrição Estadual')),
                ('email', models.CharField(blank=True, max_length=120, null=True, verbose_name='E-mail')),
                ('type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Tipo da pessoa: Jurídica ou Física')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Address', verbose_name='Endereço')),
            ],
            options={
                'verbose_name': 'Comprador',
                'verbose_name_plural': 'Compradores',
            },
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('federalTaxNumber', models.CharField(blank=True, max_length=44, null=True, verbose_name='CNPJ da Credenciadora de cartão de crédito e/ou débito ')),
                ('flag', models.CharField(blank=True, max_length=44, null=True, verbose_name='Bandeira da operadora de cartão de crédito e/ou débito')),
                ('authorization', models.CharField(blank=True, max_length=44, null=True, verbose_name='Número de autorização da operação cartão de crédito e/ou débito')),
                ('integrationPaymentType', models.CharField(blank=True, max_length=44, null=True, verbose_name='Tipo de Integração para pagamento')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Cartão',
                'verbose_name_plural': 'Cartões',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=7, null=True, verbose_name='Código')),
                ('name', models.CharField(blank=True, max_length=120, null=True, verbose_name='Nome')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Cidade',
                'verbose_name_plural': 'Cidades',
            },
        ),
        migrations.CreateModel(
            name='DocumentInvoiceReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.IntegerField(blank=True, null=True, verbose_name='Estado')),
                ('yearMonth', models.CharField(blank=True, max_length=32, null=True, verbose_name='Ano/mês')),
                ('federalTaxNumber', models.CharField(blank=True, max_length=80, null=True, verbose_name='CNPJ do emitente/CPF do remetente')),
                ('model', models.CharField(blank=True, max_length=32, null=True, verbose_name='Modelo')),
                ('series', models.CharField(blank=True, max_length=32, null=True, verbose_name='Série')),
                ('number', models.CharField(blank=True, max_length=32, null=True, verbose_name='Número')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Documento Fiscal de Referência',
                'verbose_name_plural': 'Documentos Fiscais de Referência',
            },
        ),
        migrations.CreateModel(
            name='Duplicates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duplicateNumber', models.CharField(blank=True, max_length=44, null=True, verbose_name='Número da Duplicata')),
                ('expirationOn', models.DateTimeField(blank=True, null=True, verbose_name='Data de vencimento')),
                ('amount', models.CharField(blank=True, max_length=44, null=True, verbose_name='Valor da duplicata')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Duplicata',
                'verbose_name_plural': 'Duplicatas',
            },
        ),
        migrations.CreateModel(
            name='Fuel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codeANP', models.CharField(blank=True, max_length=32, null=True, verbose_name='Código de produto da ANP')),
                ('percentageNG', models.FloatField(blank=True, null=True, verbose_name='Percentual de Gás Natural para o produto GLP')),
                ('descriptionANP', models.CharField(blank=True, max_length=255, null=True, verbose_name='Descrição do produto conforme ANP')),
                ('percentageGLP', models.FloatField(blank=True, null=True, verbose_name='Percentual do GLP derivado do petróleo no produto GLP')),
                ('percentageNGn', models.FloatField(blank=True, null=True, verbose_name='Percentual de Gás Natural Nacional')),
                ('percentageGNi', models.FloatField(blank=True, null=True, verbose_name='Percentual de Gás Natural Importado')),
                ('startingAmount', models.FloatField(blank=True, null=True, verbose_name='Valor de partida')),
                ('codif', models.CharField(blank=True, max_length=120, null=True, verbose_name='Código de autorização/registro do CODIF')),
                ('amountTemp', models.FloatField(blank=True, null=True, verbose_name='Quantidade de combustível faturada à temperatura ambiente')),
                ('stateBuyer', models.CharField(blank=True, max_length=120, null=True, verbose_name='Sigla da UF de consumo')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Imposto sobre Combustível',
                'verbose_name_plural': 'Impostos sobre Combustível',
            },
        ),
        migrations.CreateModel(
            name='FuelCide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bc', models.FloatField(blank=True, null=True, verbose_name='BC da CIDE')),
                ('rate', models.FloatField(blank=True, null=True, verbose_name='Valor da alíquota da CIDE')),
                ('cideAmount', models.FloatField(blank=True, null=True, verbose_name='Valor da CIDE')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Informação da CIDE',
                'verbose_name_plural': 'Informações da CIDE',
            },
        ),
        migrations.CreateModel(
            name='FuelPump',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spoutNumber', models.FloatField(blank=True, null=True, verbose_name='Número de identificação do bico utilizado no abastecimento')),
                ('number', models.FloatField(blank=True, null=True, verbose_name='Número de identificação da bomba ao qual o bico está interligado')),
                ('tankNumber', models.FloatField(blank=True, null=True, verbose_name='Número de identificação do tanque ao qual o bico está interligado')),
                ('beginningAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do Encerrante no início do abastecimento')),
                ('endAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do Encerrante no final do abastecimento')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Informação do grupo de “encerrante”',
                'verbose_name_plural': 'Informações do grupo de “encerrante”',
            },
        ),
        migrations.CreateModel(
            name='MedicineDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maximumPrice', models.IntegerField(blank=True, null=True, verbose_name='Preço máximo consumidor')),
                ('anvisaCode', models.CharField(blank=True, max_length=80, null=True, verbose_name='Código de Produto da ANVISA')),
                ('batchId', models.CharField(blank=True, max_length=80, null=True, verbose_name='Número do Lote de medicamentos ou de matérias-primas farmacêuticas')),
                ('batchQuantity', models.IntegerField(blank=True, null=True, verbose_name='Quantidade de produto no Lote de medicamentos ou de matérias-primas farmacêuticas')),
                ('manufacturedOn', models.DateTimeField(blank=True, null=True, verbose_name='Data de fabricação')),
                ('expireOn', models.DateTimeField(blank=True, null=True, verbose_name='Data de validade')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Detalhamento de Medicamento',
                'verbose_name_plural': 'Detalhamento de Medicamentos',
            },
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('protocol_id', models.AutoField(primary_key=True, serialize=False)),
                ('id', models.CharField(blank=True, max_length=255, verbose_name='Identificador da TAG a ser assinada, somente precisa ser informado se a UF assinar a resposta.')),
                ('environmentType', models.CharField(blank=True, max_length=15, null=True, verbose_name='Identificação do Ambiente: 1 – Produção/2 - Homologação')),
                ('applicationVersion', models.CharField(blank=True, max_length=255, null=True, verbose_name='Versão do Aplicativo que processou o Lote')),
                ('accessKey', models.CharField(blank=True, max_length=44, null=True, verbose_name='Chave de Acesso da NF-e')),
                ('receiptOn', models.DateTimeField(blank=True, null=True, verbose_name='Preenchido com a data e hora do processamento')),
                ('protocolNumber', models.CharField(blank=True, max_length=255, null=True, verbose_name='Número do Protocolo da NF-e')),
                ('validatorDigit', models.CharField(blank=True, max_length=255, null=True, verbose_name='(Digest Value) da NF-e processada Utilizado para conferir a integridade da NFe original.')),
                ('statusCode', models.IntegerField(blank=True, null=True, verbose_name='Código do status da resposta para a NF-e')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrição literal do status da resposta para a NF-e')),
                ('signature', models.TextField(blank=True, null=True, verbose_name="Assinatura XML do grupo identificado pelo atributo 'Id'")),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Protocolo',
                'verbose_name_plural': 'Protocolos',
            },
        ),
        migrations.CreateModel(
            name='ReferencedProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifierConcessory', models.CharField(blank=True, max_length=32, null=True, verbose_name='Concessão do Identificador')),
                ('identifierOrigin', models.IntegerField(blank=True, null=True, verbose_name='Origem do Identificador')),
            ],
            options={
                'verbose_name': 'Processo Referenciado',
                'verbose_name_plural': 'Processos Referenciados',
            },
        ),
        migrations.CreateModel(
            name='TaxCOFINS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cst', models.CharField(blank=True, max_length=32, null=True, verbose_name='Código de Situação Tributária do PIS')),
                ('baseTax', models.FloatField(blank=True, null=True, verbose_name='Valor da Base de Cálculo do PIS')),
                ('rate', models.FloatField(blank=True, null=True, verbose_name='Alíquota do PIS (em percentual)')),
                ('amount', models.FloatField(blank=True, null=True, verbose_name='Valor do PIS')),
                ('baseTaxProductQuantity', models.FloatField(blank=True, null=True, verbose_name='Quantidade Vendida')),
                ('productRate', models.FloatField(blank=True, null=True, verbose_name='Alíquota do PIS (em reais)')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'COFINS do Produto',
                'verbose_name_plural': 'COFINS dos Produtos',
            },
        ),
        migrations.CreateModel(
            name='TaxCouponInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modelDocumentFiscal', models.CharField(blank=True, max_length=32, null=True, verbose_name='Modelo do Documento Fiscal')),
                ('orderECF', models.CharField(blank=True, max_length=32, null=True, verbose_name='Pedido ECF')),
                ('orderCountOperation', models.IntegerField(blank=True, null=True, verbose_name='Operação de Contagem de Pedidos')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Informação sobre o Cupom Fiscal',
                'verbose_name_plural': 'Informações sobre os Cupons Fiscais',
            },
        ),
        migrations.CreateModel(
            name='TaxICMS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin', models.CharField(blank=True, max_length=120, null=True, verbose_name='Origem da mercadoria')),
                ('cst', models.CharField(blank=True, max_length=120, null=True, verbose_name='Tributação do ICMS')),
                ('baseTaxModality', models.CharField(blank=True, max_length=120, null=True, verbose_name='Modalidade de determinação da BC do ICMS')),
                ('baseTax', models.FloatField(blank=True, null=True, verbose_name='Valor da BC do ICMS')),
                ('baseTaxSTModality', models.CharField(blank=True, max_length=120, null=True, verbose_name='Modalidade de determinação da BC do ICMS ST')),
                ('baseTaxSTReduction', models.FloatField(blank=True, null=True, verbose_name='Percentual da Redução de BC do ICMS ST')),
                ('baseTaxSTAmount', models.FloatField(blank=True, null=True, verbose_name='Valor da BC do ICMS ST')),
                ('baseTaxReduction', models.FloatField(blank=True, null=True, verbose_name='Percentual da Redução de BC')),
                ('stRate', models.FloatField(blank=True, null=True, verbose_name='Alíquota do imposto do ICMS ST')),
                ('stAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do ICMS ST')),
                ('stMarginAmount', models.FloatField(blank=True, null=True, verbose_name='Percentual da margem de valor Adicionado do ICMS ST')),
                ('csosn', models.CharField(blank=True, max_length=120, null=True, verbose_name='Código de Situação da Operação')),
                ('rate', models.FloatField(blank=True, null=True, verbose_name='Alíquota do imposto')),
                ('amount', models.FloatField(blank=True, null=True, verbose_name='Valor do ICMS')),
                ('snCreditRate', models.CharField(blank=True, max_length=120, null=True, verbose_name='Alíquota aplicável de cálculo do crédito (Simples Nacional)')),
                ('snCreditAmount', models.CharField(blank=True, max_length=120, null=True, verbose_name='Valor crédito do ICMS que pode ser aproveitado nos termos do art. 23 da LC 123 (Simples Nacional)')),
                ('stMarginAddedAmount', models.CharField(blank=True, max_length=120, null=True, verbose_name='Percentual da margem de valor Adicionado do ICMS ST')),
                ('stRetentionAmount', models.CharField(blank=True, max_length=120, null=True, verbose_name='Valor do ICMS ST/Valor do ICMS ST cobrado anteriormente por ST')),
                ('baseSTRetentionAmount', models.CharField(blank=True, max_length=120, null=True, verbose_name='Valor da BC do ICMS ST retido')),
                ('baseTaxOperationPercentual', models.CharField(blank=True, max_length=120, null=True, verbose_name='Imposto Base Percentual da Operação')),
                ('ufst', models.CharField(blank=True, max_length=120, null=True, verbose_name='UF para qual é devido o ICMS ST')),
                ('amountSTUnfounded', models.FloatField(blank=True, null=True, verbose_name='Valor ICMS Desonerado')),
                ('amountSTReason', models.CharField(blank=True, max_length=120, null=True, verbose_name='Motivo Desoneração ICMS')),
                ('baseSNRetentionAmount', models.CharField(blank=True, max_length=120, null=True, verbose_name='Valor da BC do ICMS ST retido')),
                ('snRetentionAmount', models.CharField(blank=True, max_length=120, null=True, verbose_name='Valor do ICMS ST retido')),
                ('amountOperation', models.CharField(blank=True, max_length=120, null=True, verbose_name='Valor do ICMS da Operação')),
                ('percentualDeferment', models.CharField(blank=True, max_length=120, null=True, verbose_name='Percentual do Diferimento')),
                ('baseDeferred', models.CharField(blank=True, max_length=120, null=True, verbose_name='Valor do ICMS Diferido')),
                ('fcpRate', models.FloatField(blank=True, null=True, verbose_name='Percentual do FCP - Valor do ICMS relativo ao Fundo de Combate à Pobreza (pFCP) (Percentual máximo permitido é 2%)')),
                ('fcpAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do FCP - Valor do ICMS relativo ao Fundo de Combate à Pobreza (vFCP)')),
                ('fcpstRate', models.FloatField(blank=True, null=True, verbose_name='Percentual do FCP retido por ST - Valor do ICMS relativo ao Fundo de Combate à Pobreza (pFCPST) retido por substituição tributária.')),
                ('fcpstAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do FCP retido por ST - Valor do ICMS relativo ao Fundo de Combate à Pobreza (vFCPST) retido por substituição tributária.')),
                ('fcpstRetRate', models.FloatField(blank=True, null=True, verbose_name='Percentual do FCP retido por anteriormente por ST - Valor do ICMS relativo ao Fundo de Combate à Pobreza (pFCPSTRet) retido anteriormente por substituição tributária.')),
                ('fcpstRetAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do FCP retido por anteriormente por ST - Valor do ICMS relativo ao Fundo de Combate à Pobreza (vFCPSTRet) retido anteriormente por substituição tributária.')),
                ('bcfcpstAmount', models.FloatField(blank=True, null=True, verbose_name='Informar o valor da Base de Cálculo do FCP')),
                ('finalConsumerRate', models.FloatField(blank=True, null=True, verbose_name='Modalidade de determinação da BC do ICMS')),
                ('bcstRetIssuerAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do BC do ICMS ST retido na UF remetente')),
                ('stRetIssuerAmout', models.FloatField(blank=True, null=True, verbose_name='Valor do ICMS ST retido na UF remetente')),
                ('bcstBuyerAmount', models.FloatField(blank=True, null=True, verbose_name='Valor da BC do ICMS ST da UF destino')),
                ('stBuyerAmout', models.FloatField(blank=True, null=True, verbose_name='Valor do ICMS ST da UF destino')),
                ('substituteAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do ICMS próprio do Substituto')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'ICMS do Produto',
                'verbose_name_plural': "ICMS' de Produtos",
            },
        ),
        migrations.CreateModel(
            name='TaxICMSDestination',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vBCUFDest', models.FloatField(blank=True, null=True, verbose_name='Valor da Base de Cálculo do ICMS na UF de destino.')),
                ('pFCPUFDest', models.FloatField(blank=True, null=True, verbose_name='Percentual adicional inserido na alíquota interna da UF de destino, relativo ao Fundo de Combate à Pobreza (FCP) naquela UF')),
                ('pICMSUFDest', models.FloatField(blank=True, null=True, verbose_name='Alíquota adotada nas operações internas na UF de destino para o produto/mercadoria')),
                ('pICMSInter', models.FloatField(blank=True, null=True, verbose_name='Alíquota interestadual das UF envolvidas')),
                ('pICMSInterPart', models.FloatField(blank=True, null=True, verbose_name='Percentual de ICMS Interestadual para a UF de destino')),
                ('vFCPUFDest', models.FloatField(blank=True, null=True, verbose_name='Valor do ICMS relativo ao Fundo de Combate à Pobreza (FCP) da UF de destino')),
                ('vICMSUFDest', models.FloatField(blank=True, null=True, verbose_name='Valor do ICMS Interestadual para a UF de destino')),
                ('vICMSUFRemet', models.FloatField(blank=True, null=True, verbose_name='Valor do ICMS Interestadual para a UF do remetente')),
                ('vBCFCPUFDest', models.FloatField(blank=True, null=True, verbose_name='Valor da BC FCP na UF de destino')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Informação do ICMS Interestadual',
                'verbose_name_plural': "Informações dos ICMS's Interestaduais",
            },
        ),
        migrations.CreateModel(
            name='TaxII',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baseTax', models.CharField(blank=True, max_length=32, null=True, verbose_name='Valor BC do Imposto de Importação')),
                ('customsExpenditureAmount', models.CharField(blank=True, max_length=32, null=True, verbose_name='Valor despesas aduaneiras')),
                ('amount', models.FloatField(blank=True, null=True, verbose_name='Valor Imposto de Importação')),
                ('iofAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Imposto sobre Operações Financeiras')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Imposto de Importação',
                'verbose_name_plural': 'Impostos de Importação',
            },
        ),
        migrations.CreateModel(
            name='TaxIPI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classification', models.CharField(blank=True, max_length=120, null=True, verbose_name='Classe de enquadramento do IPI para Cigarros e Bebidas')),
                ('producerCNPJ', models.CharField(blank=True, max_length=120, null=True, verbose_name='CNPJ do produtor da mercadoria, quando diferente do emitente. Somente para os casos de exportação direta ou indireta.')),
                ('stampCode', models.CharField(blank=True, max_length=120, null=True, verbose_name='Código do selo de controle IPI')),
                ('stampQuantity', models.FloatField(blank=True, null=True, verbose_name='Quantidade de selo de controle')),
                ('classificationCode', models.CharField(blank=True, max_length=120, null=True, verbose_name='Código de Enquadramento Legal do IPI')),
                ('cst', models.CharField(blank=True, max_length=120, null=True, verbose_name='Código da situação tributária do IPI')),
                ('base', models.CharField(blank=True, max_length=120, null=True, verbose_name='Valor da BC do IPI')),
                ('rate', models.FloatField(blank=True, null=True, verbose_name='Alíquota do IPI')),
                ('unitQuantity', models.FloatField(blank=True, null=True, verbose_name='Quantidade total na unidade padrão para tributação (somente para os produtos tributados por unidade)')),
                ('unitAmount', models.FloatField(blank=True, null=True, verbose_name='Valor por Unidade Tributável')),
                ('amount', models.FloatField(blank=True, null=True, verbose_name='Valor IPI')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'IPI do Produto',
                'verbose_name_plural': "IPI's dos Produtos",
            },
        ),
        migrations.CreateModel(
            name='TaxpayerComments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(blank=True, max_length=255, null=True, verbose_name='Campo')),
                ('text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Texto')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Comentário do Contribuinte',
                'verbose_name_plural': 'Comentários dos Contribuintes',
            },
        ),
        migrations.CreateModel(
            name='TaxPIS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cst', models.CharField(blank=True, max_length=32, null=True, verbose_name='Código de Situação Tributária do PIS')),
                ('baseTax', models.FloatField(blank=True, null=True, verbose_name='Valor da Base de Cálculo do PIS')),
                ('rate', models.FloatField(blank=True, null=True, verbose_name='Alíquota do PIS (em percentual)')),
                ('amount', models.FloatField(blank=True, null=True, verbose_name='Valor do PIS')),
                ('baseTaxProductQuantity', models.FloatField(blank=True, null=True, verbose_name='Quantidade Vendida')),
                ('productRate', models.FloatField(blank=True, null=True, verbose_name='Alíquota do PIS (em reais)')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'PIS do Produto',
                'verbose_name_plural': 'PIS dos Produtos',
            },
        ),
        migrations.CreateModel(
            name='TotalsICMS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baseTax', models.FloatField(blank=True, null=True, verbose_name='Base de Cálculo do ICMS')),
                ('icmsAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do ICMS')),
                ('icmsExemptAmount', models.FloatField(blank=True, null=True, verbose_name='Valor ICMS Total desonerado')),
                ('stCalculationBasisAmount', models.FloatField(blank=True, null=True, verbose_name='Base de Cálculo do ICMS Substituição Tributária')),
                ('stAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do ICMS ST ')),
                ('productAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total dos produtos e serviços')),
                ('freightAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do Frete')),
                ('insuranceAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do Seguro')),
                ('invoiceAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total da NF-e')),
                ('discountAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do Desconto')),
                ('iiAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do Imposto de Importação')),
                ('ipiAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do IPI')),
                ('pisAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do PIS')),
                ('cofinsAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do COFINS')),
                ('othersAmount', models.FloatField(blank=True, null=True, verbose_name='Outras Despesas acessórias')),
                ('fcpufDestinationAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total da NF-e')),
                ('icmsufDestinationAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total ICMS FCP UF Destino')),
                ('icmsufSenderAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total ICMS Interestadual UF Destino')),
                ('federalTaxesAmount', models.FloatField(blank=True, null=True, verbose_name='Valor aproximado total de tributos federais, estaduais e municipais.')),
                ('fcpAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do FCP - Valor do ICMS relativo ao Fundo de Combate à Pobreza')),
                ('fcpstAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do FCP retido por ST - Valor do ICMS relativo ao Fundo de Combate à Pobreza (vFCP) retido por substituição tributária.')),
                ('fcpstRetAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do FCP retido por anteriormente por ST - Valor do ICMS relativo ao Fundo de Combate à Pobreza (vFCP) retido anteriormente por substituição tributária.')),
                ('ipiDevolAmount', models.FloatField(blank=True, null=True, verbose_name='Valor total do IPI devolvido')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'ICMS Total',
                'verbose_name_plural': "ICMS's Totais",
            },
        ),
        migrations.CreateModel(
            name='TotalsISSQN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('totalServiceNotTaxedICMS', models.FloatField(blank=True, null=True, verbose_name='Valor Total Serv.Não Tributados p/ ICMS')),
                ('baseRateISS', models.FloatField(blank=True, null=True, verbose_name='Base de Cálculo do ISS')),
                ('totalISS', models.FloatField(blank=True, null=True, verbose_name='Valor Total do ISS')),
                ('valueServicePIS', models.FloatField(blank=True, null=True, verbose_name='Valor do PIS sobre Serviços')),
                ('valueServiceCOFINS', models.FloatField(blank=True, null=True, verbose_name='Valor da COFINS sobre Serviços')),
                ('provisionService', models.DateTimeField(blank=True, null=True, verbose_name='Data Prestação Serviço')),
                ('deductionReductionBC', models.FloatField(blank=True, null=True, verbose_name='Valor Dedução para Redução da BC')),
                ('valueOtherRetention', models.FloatField(blank=True, null=True, verbose_name='Valor Outras Retenções')),
                ('discountUnconditional', models.FloatField(blank=True, null=True, verbose_name='Valor Desconto Incondicionado')),
                ('discountConditioning', models.FloatField(blank=True, null=True, verbose_name='Valor Desconto Condicionado')),
                ('totalRetentionISS', models.FloatField(blank=True, null=True, verbose_name='Valor Total Retenção ISS')),
                ('codeTaxRegime', models.FloatField(blank=True, null=True, verbose_name='Código Regime Tributação')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'ISSQN Total',
                'verbose_name_plural': "ISSQN's Totais",
            },
        ),
        migrations.CreateModel(
            name='TransportGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cityName', models.CharField(blank=True, max_length=80, null=True, verbose_name='Nome do Município')),
                ('federalTaxNumber', models.CharField(blank=True, max_length=25, null=True, verbose_name='CNPJ do Transportador (CNPJ) ou CPF do Transportador (CPF)')),
                ('cpf', models.CharField(blank=True, max_length=11, null=True, verbose_name='CPF do Transportador (CPF)')),
                ('name', models.CharField(blank=True, max_length=80, null=True, verbose_name='Razão Social ou nome')),
                ('stateTaxNumber', models.CharField(blank=True, max_length=25, null=True, verbose_name='Inscrição Estadual do Transportador')),
                ('fullAddress', models.CharField(blank=True, max_length=255, null=True, verbose_name='Endereço Completo')),
                ('state', models.CharField(blank=True, max_length=10, null=True, verbose_name='Sigla da UF')),
                ('transportRetention', models.CharField(blank=True, max_length=50, null=True, verbose_name='Grupo de Retenção do ICMS do transporte')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Transportadora',
                'verbose_name_plural': 'Transportadoras',
            },
        ),
        migrations.CreateModel(
            name='TransportRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do Serviço')),
                ('bcRetentionAmount', models.FloatField(blank=True, null=True, verbose_name='BC da Retenção do ICMS')),
                ('icmsRetentionRate', models.FloatField(blank=True, null=True, verbose_name='Alíquota da Retenção')),
                ('icmsRetentionAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do ICMS Retido')),
                ('cfop', models.FloatField(blank=True, null=True, verbose_name='CFOP de Serviço de Transporte')),
                ('cityGeneratorFactCode', models.FloatField(blank=True, null=True, verbose_name='Código do Municipio de ocorrencia do fato gerador do ICMS do Transpote')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Taxa de transporte',
                'verbose_name_plural': 'Taxas de tansporte',
            },
        ),
        migrations.CreateModel(
            name='TransportReboque',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate', models.CharField(blank=True, max_length=80, null=True, verbose_name='Placa do Veiculo')),
                ('uf', models.CharField(blank=True, max_length=6, null=True, verbose_name='UF Veiculo Reboque')),
                ('rntc', models.CharField(blank=True, max_length=25, null=True, verbose_name='Registro Nacional de Transportador de Carga (ANTT) (RNTC)')),
                ('wagon', models.CharField(blank=True, max_length=32, null=True, verbose_name='Identificação do Vagão')),
                ('ferry', models.CharField(blank=True, max_length=32, null=True, verbose_name='Identificação da Balsa')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Reboque',
                'verbose_name_plural': 'Reboques',
            },
        ),
        migrations.CreateModel(
            name='TransportVehicle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate', models.CharField(blank=True, max_length=25, null=True, verbose_name='Placa do Veiculo')),
                ('state', models.CharField(blank=True, max_length=6, null=True, verbose_name='Sigla da UF')),
                ('rntc', models.CharField(blank=True, max_length=25, null=True, verbose_name='Registro Nacional de Transportador de Carga (ANTT)')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Veículo transportador',
                'verbose_name_plural': 'Veículos transportadores',
            },
        ),
        migrations.CreateModel(
            name='TransportVolume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('volumeQuantity', models.IntegerField(blank=True, null=True, verbose_name='Quantidade de volumes transportados')),
                ('species', models.CharField(blank=True, max_length=25, null=True, verbose_name='Espécie dos volumes transportados')),
                ('brand', models.CharField(blank=True, max_length=25, null=True, verbose_name='Marca dos Volumes Transportados')),
                ('volumeNumeration', models.CharField(blank=True, max_length=25, null=True, verbose_name='Numeração dos Volumes Transportados')),
                ('netWeight', models.FloatField(blank=True, null=True, verbose_name='Peso Liquido (em Kg)')),
                ('grossWeight', models.FloatField(blank=True, null=True, verbose_name='Peso Bruto (em Kg)')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Volume transportado',
                'verbose_name_plural': 'Volumes transportados',
            },
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('freightModality', models.IntegerField(blank=True, null=True, verbose_name='Modalidade do frete')),
                ('sealNumber', models.CharField(blank=True, max_length=25, null=True, verbose_name='Número dos Lacres')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('reboque', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TransportReboque', verbose_name='Grupo Reboque')),
                ('transpRate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TransportRate', verbose_name='Grupo Retenção ICMS transporte')),
                ('transportGroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TransportGroup', verbose_name='Grupo Transportador')),
                ('transportVehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TransportVehicle', verbose_name='Grupo Veículo')),
                ('volume', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TransportVolume', verbose_name='Grupo de Volumes')),
            ],
            options={
                'verbose_name': 'Transporte',
                'verbose_name_plural': 'Transportes',
            },
        ),
        migrations.CreateModel(
            name='Totals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('icms', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TotalsICMS', verbose_name='ICMS Total')),
                ('issqn', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TotalsISSQN', verbose_name='ICMS Total')),
            ],
            options={
                'verbose_name': 'Imposto total',
                'verbose_name_plural': 'Impostos totais',
            },
        ),
        migrations.CreateModel(
            name='TaxDocumentsReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accessKey', models.CharField(blank=True, max_length=120, null=True, verbose_name='Chave de Acesso')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('documentInvoiceReference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.DocumentInvoiceReference', verbose_name='Documento Fiscal de Referencia')),
                ('taxCouponInformation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TaxCouponInformation', verbose_name='Informação sobre o Cupom Fiscal')),
            ],
            options={
                'verbose_name': 'Taxa do Documento de Referência',
                'verbose_name_plural': 'Taxas dos Documentos de Referência',
            },
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('totalTax', models.FloatField(blank=True, null=True, verbose_name='Tributos incidentes no Produto ou Serviço')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('cofins', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TaxCOFINS', verbose_name='Grupo COFINS')),
                ('icms', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TaxICMS', verbose_name='Dados do ICMS Normal e ST')),
                ('icmsDestination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TaxICMSDestination', verbose_name='Informação do ICMS Interestadual')),
                ('ii', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TaxII', verbose_name='Grupo Imposto de Importação')),
                ('ipi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TaxIPI', verbose_name='Grupo IPI')),
                ('pis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.TaxPIS', verbose_name='Grupo PIS')),
            ],
            options={
                'verbose_name': 'Tributo incidente no Produto ou Serviço',
                'verbose_name_plural': 'Tributos incidentes no Produto ou Serviço',
            },
        ),
        migrations.CreateModel(
            name='PaymentDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(blank=True, max_length=44, null=True, verbose_name='Forma de pagamento')),
                ('amount', models.CharField(blank=True, max_length=44, null=True, verbose_name='Valor do pagamento')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('card', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Card', verbose_name='Cartão')),
            ],
            options={
                'verbose_name': 'Detalhe do Pagamento',
                'verbose_name_plural': 'Detalhes dos pagamentos',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payBack', models.FloatField(blank=True, null=True, verbose_name='Valor do troco')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('paymentDetail', models.ManyToManyField(blank=True, to='invoice.PaymentDetail', verbose_name='Detalhe do pagamento')),
            ],
            options={
                'verbose_name': 'Pagamento',
                'verbose_name_plural': 'Pagamentos',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=32, null=True, verbose_name='Código do produto ou serviço')),
                ('codeGTIN', models.CharField(blank=True, max_length=32, null=True, verbose_name='GTIN (Global Trade Item Number) do produto, antigo código EAN ou código de barras (cEAN)')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Descrição do produto ou serviço')),
                ('ncm', models.CharField(blank=True, max_length=32, null=True, verbose_name='Código NCM com 8 dígitos ou 2 dígitos')),
                ('extipi', models.CharField(blank=True, max_length=32, null=True, verbose_name='EX_TIPI')),
                ('cfop', models.IntegerField(blank=True, null=True, verbose_name='Código Fiscal de Operações e Prestações')),
                ('unit', models.CharField(blank=True, max_length=32, null=True, verbose_name='Unidade Comercial')),
                ('quantity', models.FloatField(blank=True, null=True, verbose_name='Quantidade Comercial')),
                ('unitAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Unitário de Comercialização')),
                ('totalAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total Bruto dos Produtos ou Serviços')),
                ('eanTaxableCode', models.CharField(blank=True, max_length=32, null=True, verbose_name='GTIN (Global Trade Item Number) da unidade tributável, antigo código EAN ou código de barras')),
                ('unitTax', models.CharField(blank=True, max_length=32, null=True, verbose_name='Unidade Tributável')),
                ('quantityTax', models.FloatField(blank=True, null=True, verbose_name='Quantidade Tributável')),
                ('taxUnitAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Unitário de tributação')),
                ('freightAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do Frete')),
                ('insuranceAmount', models.FloatField(blank=True, null=True, verbose_name='Valor Total do Seguro')),
                ('discountAmount', models.FloatField(blank=True, null=True, verbose_name='Valor do Desconto')),
                ('othersAmount', models.FloatField(blank=True, null=True, verbose_name='Outras despesas acessórias')),
                ('totalIndicator', models.BooleanField(verbose_name='Indica se valor do Item entra no valor total da NF-e')),
                ('cest', models.CharField(blank=True, max_length=32, null=True, verbose_name='Código especificador da substituição tributária')),
                ('additionalInformation', models.TextField(blank=True, null=True, verbose_name='Informações Adicionais do Produto')),
                ('numberOrderBuy', models.CharField(blank=True, max_length=32, null=True, verbose_name='Número do pedido de compra')),
                ('itemNumberOrderBuy', models.IntegerField(blank=True, null=True, verbose_name='Item do Pedido de Compra')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('fuel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Fuel', verbose_name='Detalhamento de combustível')),
                ('medicineDetail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.MedicineDetail', verbose_name='Detalhamento de Medicamentos e de matérias-primas farmacêuticas')),
                ('tax', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Tax', verbose_name='Tributos incidentes no Produto ou Serviço')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Itens',
            },
        ),
        migrations.CreateModel(
            name='Issuer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('federalTaxNumber', models.CharField(blank=True, max_length=25, null=True, verbose_name='CNPJ do emitente / CPF do remetente')),
                ('name', models.CharField(blank=True, max_length=120, null=True, verbose_name='Razão Social ou Nome do emitente')),
                ('tradeName', models.CharField(blank=True, max_length=120, null=True, verbose_name='Nome fantasia')),
                ('stateTaxNumber', models.CharField(blank=True, max_length=25, null=True, verbose_name='Inscrição Estadual')),
                ('codeTaxRegime', models.CharField(blank=True, max_length=25, null=True, verbose_name='Código de Regime Tributário')),
                ('cnae', models.IntegerField(blank=True, null=True, verbose_name='CNAE fiscal')),
                ('im', models.CharField(blank=True, max_length=25, null=True, verbose_name='Inscrição Municipal do Prestador de Serviço')),
                ('iest', models.CharField(blank=True, max_length=25, null=True, verbose_name='IE do Substituto Tributário')),
                ('type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Tipo da pessoa: Jurídica ou Física')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Address', verbose_name='Endereço')),
            ],
            options={
                'verbose_name': 'Emissor',
                'verbose_name_plural': 'Emissores',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currentStatus', models.CharField(blank=True, max_length=120, null=True, verbose_name='Situação Atual')),
                ('stateCode', models.FloatField(blank=True, null=True, verbose_name='Código da UF do emitente do Documento Fiscal')),
                ('checkCode', models.FloatField(blank=True, null=True, verbose_name='Código Numérico que compõe a Chave de Acesso')),
                ('operationNature', models.CharField(blank=True, max_length=120, null=True, verbose_name='Descrição da Natureza da Operação')),
                ('paymentType', models.CharField(blank=True, max_length=120, null=True, verbose_name='Indicador da forma de pagamento')),
                ('codeModel', models.FloatField(blank=True, null=True, verbose_name='Código do Modelo do Documento Fiscal')),
                ('serie', models.FloatField(blank=True, null=True, verbose_name='Série do Documento Fiscal')),
                ('number', models.FloatField(blank=True, null=True, verbose_name='Número do Documento Fiscal')),
                ('issuedOn', models.DateTimeField(blank=True, null=True, verbose_name='Data de emissão do Documento Fiscal')),
                ('operationOn', models.DateTimeField(blank=True, null=True, verbose_name='Data e Hora de Saída ou da Entrada da Mercadoria/Produto')),
                ('operationType', models.CharField(blank=True, max_length=120, null=True, verbose_name='Tipo de Operação')),
                ('destination', models.CharField(blank=True, max_length=120, null=True, verbose_name='Identificador de local de destino da operação')),
                ('cityCode', models.FloatField(blank=True, null=True, verbose_name='Código do Município de Ocorrência do Fato Gerador')),
                ('printType', models.CharField(blank=True, max_length=120, null=True, verbose_name='Formato de Impressão do DANFE')),
                ('issueType', models.CharField(blank=True, max_length=120, null=True, verbose_name='Tipo de Emissão da NF-e')),
                ('checkCodeDigit', models.FloatField(blank=True, null=True, verbose_name='Dígito Verificador da Chave de Acesso da NF-e')),
                ('environmentType', models.CharField(blank=True, max_length=120, null=True, verbose_name='Identificação do Ambiente')),
                ('purposeType', models.CharField(blank=True, max_length=120, null=True, verbose_name='Finalidade de emissão da NF-e')),
                ('consumerType', models.CharField(blank=True, max_length=120, null=True, verbose_name='Indica operação com Consumidor final')),
                ('presenceType', models.CharField(blank=True, max_length=120, null=True, verbose_name='Indicador de presença do comprador no estabelecimento comercial no momento da operação')),
                ('processType', models.CharField(blank=True, max_length=120, null=True, verbose_name='Processo de emissão da NF-e')),
                ('invoiceVersion', models.CharField(blank=True, max_length=120, null=True, verbose_name='Versão do Processo de emissão da NF-e')),
                ('xmlVersion', models.CharField(blank=True, max_length=120, null=True, verbose_name='Versão do leiaute')),
                ('contingencyOn', models.DateTimeField(blank=True, null=True, verbose_name='Data e Hora da entrada em contingência')),
                ('contingencyJustification', models.CharField(blank=True, max_length=120, null=True, verbose_name='Justificativa da entrada em contingência')),
                ('type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Tipo de Nota Fiscal')),
                ('isPending', models.BooleanField(blank=True, default=True, null=True, verbose_name='Pendente')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('additionalInformation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.AdditionalInformation', verbose_name='Informacoes Adicionais')),
                ('billing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Billing', verbose_name='Grupo Cobrança')),
                ('buyer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Buyer', verbose_name='Grupo de identificação do Destinatário da NF-e')),
                ('issuer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Issuer', verbose_name='Fornecedor')),
                ('items', models.ManyToManyField(blank=True, to='invoice.Item', verbose_name='Grupo do detalhamento de Produtos e Serviços da NF-e')),
                ('payment', models.ManyToManyField(blank=True, to='invoice.Payment', verbose_name='Formas de Pagamento')),
                ('protocol', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='invoice.Protocol', verbose_name='Informações do Protocolo de resposta. TAG a ser assinada')),
                ('totals', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Totals', verbose_name='Grupo Totais da NF-e ')),
                ('transport', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.Transport', verbose_name='Grupo de Informações do Transporte da NF-e')),
            ],
            options={
                'verbose_name': 'Nota Fiscal Eletrônica',
                'verbose_name_plural': 'Notas Fiscais Eletrônicas',
            },
        ),
        migrations.AddField(
            model_name='fuel',
            name='cide',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.FuelCide', verbose_name='Contribuição de Intervenção do Domínio Econômico'),
        ),
        migrations.AddField(
            model_name='fuel',
            name='pump',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.FuelPump', verbose_name='Grupo de Encerrante'),
        ),
        migrations.AddField(
            model_name='billing',
            name='duplicates',
            field=models.ManyToManyField(blank=True, to='invoice.Duplicates', verbose_name='Duplicatas'),
        ),
        migrations.AddField(
            model_name='address',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoice.City', verbose_name='Cidade'),
        ),
        migrations.AddField(
            model_name='additionalinformation',
            name='referencedProcess',
            field=models.ManyToManyField(blank=True, to='invoice.ReferencedProcess', verbose_name='Grupo de Processos referenciados'),
        ),
        migrations.AddField(
            model_name='additionalinformation',
            name='taxDocumentsReference',
            field=models.ManyToManyField(blank=True, to='invoice.TaxDocumentsReference', verbose_name='Documentos Fiscais Referenciados'),
        ),
        migrations.AddField(
            model_name='additionalinformation',
            name='taxpayerComments',
            field=models.ManyToManyField(blank=True, to='invoice.TaxpayerComments', verbose_name='Grupo do campo de uso livre do contribuinte'),
        ),
    ]
